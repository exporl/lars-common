<?xml version="1.0" ?>
<xs:schema  xmlns:xs="http://www.w3.org/2001/XMLSchema"
            targetNamespace="http://www.w3schools.com"
            xmlns="http://www.w3schools.com"
            elementFormDefault="unqualified"
            attributeFormDefault="unqualified">
 
  <xs:group name="default">
    <xs:choice>
      <xs:element ref="Defaults"></xs:element>
      <xs:element ref="Include"></xs:element>
      <xs:element ref="VerticalLayout"></xs:element>
      <xs:element ref="HorizontalLayout"></xs:element>
      <xs:element ref="GridLayout"></xs:element>
      <xs:element ref="Button"></xs:element>
      <xs:element ref="Panel"></xs:element>      
      <xs:element ref="Text"></xs:element>
      <xs:element ref="Image"></xs:element>
      <xs:element ref="VerticalScrollView"></xs:element>
      <xs:element ref="HorizontalScrollView"></xs:element>
      <xs:element ref="Dropdown"></xs:element>
      <xs:element ref="Slider"></xs:element>
      <xs:element ref="Toggle"></xs:element>      
      <xs:element ref="InputField"></xs:element>
      <xs:element ref="ToggleGroup"></xs:element>
      <xs:element ref="TableLayout"></xs:element>
      <xs:element ref="ToggleButton"></xs:element>
      <xs:element ref="Mask"></xs:element>      
    </xs:choice>
  </xs:group>
  
  <xs:complexType name="base">    
    <xs:attributeGroup ref="simpleAttributes" />    
    <xs:attribute name="image" type="xs:string" />
    <xs:attribute name="text" type="xs:string" />    
    <xs:attributeGroup ref="rectPosition" />
    <xs:attributeGroup ref="events" />
    <xs:attributeGroup ref="rectTransform" />
    <xs:attributeGroup ref="layoutElement" />
    <xs:attributeGroup ref="animation" />
    <xs:attributeGroup ref="dragging" />    
    <xs:attributeGroup ref="audio" />
    <xs:attributeGroup ref="viewModel" />
  </xs:complexType>

  <xs:attributeGroup name="viewModel">
    <xs:attribute name="vm-dataSource" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specify the view model property to retrieve data from.</xs:documentation>
      </xs:annotation>
    </xs:attribute>    
  </xs:attributeGroup>
  
  <xs:complexType name="simple">
    <xs:attributeGroup ref="simpleAttributes" />
    <xs:attributeGroup ref="events" />
  </xs:complexType>

  <xs:complexType name="blank" />
  
  <xs:element name="XmlLayout">
    <xs:complexType>      
      <xs:complexContent mixed="true">        
        <xs:annotation>
          <xs:documentation>Root tag for XmlLayout</xs:documentation>
        </xs:annotation>        
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="viewModel" />
        </xs:extension>        
      </xs:complexContent>      
    </xs:complexType>        
  </xs:element>
        
  <xs:element name="VerticalLayout">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
            <xs:element ref="List" />
          </xs:choice>
          <xs:attributeGroup ref="layoutBase" />
          <xs:attributeGroup ref="image" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="HorizontalLayout">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
            <xs:element ref="List" />
          </xs:choice>
          <xs:attributeGroup ref="layoutBase" />
          <xs:attributeGroup ref="image" />
        </xs:extension>        
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="TableLayout">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Row" />
            <xs:element ref="List" />
          </xs:choice>
          <xs:attribute name="cellPadding" type="rectOffset">
            <xs:annotation>
              <xs:documentation>
                Sets the default padding value for each cell. This will be forced on each cell unless this tables 'useGlobalCellPadding' is set to false
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cellSpacing" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                Sets the spacing between each cell (and row).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cellBackgroundImage" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                Sets the default background image for each cell. This can be overriden on a cell-by-cell basis if needed by setting the 'dontUseTableCellBackground' property.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cellBackgroundColor" type="color">
            <xs:annotation>
              <xs:documentation>
                Sets the default background color for each cell. This can be overriden on a cell-by-cell basis if needed by setting the 'dontUseTableCellBackground' property.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="useAlternateCellBackgroundColors" type="xs:boolean"></xs:attribute>
          <xs:attribute name="cellBackgroundColorAlternate" type="color"></xs:attribute>
          <xs:attribute name="rowBackgroundImage" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                Sets the default background image for each row. This can be overriden on a row-by-row basis if needed by setting the 'dontUseTableRowBackground' property.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="rowBackgroundColor" type="color">
            <xs:annotation>
              <xs:documentation>
                Sets the default background color for each row. This can be overriden on a row-by-row basis if needed by setting the 'dontUseTableRowBackground' property.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="useAlternateRowBackgroundColors" type="xs:boolean"></xs:attribute>
          <xs:attribute name="rowBackgroundColorAlternate" type="color"></xs:attribute>
          <xs:attribute name="automaticallyAddColumns" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Should this TableLayout automatically add column widths if the number of cells in any row exceeds the number of column widths set?</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="automaticallyRemoveEmptyColumns" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>Should this TableLayout automatically remove column widths that are defined but not used by any cells? (E.g. if there are 4 column widths defined, but no row has more than 3 cells, then the 4th column width would be removed)</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="padding" type="rectOffset" />
          <xs:attribute name="useGlobalCellPadding" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If this is set to true (default), then the 'cellPadding' value set on this TableLayout will be applied to each cell.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="autoCalculateHeight" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If this is set to true, then the height of this TableLayout will be automatically set to the sum of all the row heights (+ spacing). This should not be used in combination with automatically sized row heights.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="columnWidths"  type="floatList">
            <xs:annotation>
              <xs:documentation>A list of column widths in the format '10,10,10,10' where each value is a column width.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attributeGroup ref="image" />
        </xs:extension>        
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Row">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="simple">          
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Cell" />
            <xs:element ref="List" />
          </xs:choice>
          <xs:attribute name="preferredHeight">
            <xs:annotation>
              <xs:documentation>
                Sets the preferred height for this row. This value will be used unless there is no space available. Any rows with this value not set (or set to 0) will be auto-sized instead.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="dontUseTableRowBackground" type="xs:boolean" />
          <xs:attributeGroup ref="image" />
        </xs:extension>
      </xs:complexContent>     
    </xs:complexType>        
  </xs:element>

  <xs:element name="Cell">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default" />
          </xs:choice>
          <xs:attribute name="dontUseTableCellBackground" type="xs:boolean" />                    
          <xs:attribute name="columnSpan" type="xs:int" />          
          <xs:attributeGroup ref="layoutBase" />
          <xs:attribute name="overrideGlobalPadding" type="xs:boolean" />
          <xs:attributeGroup ref="image" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="GridLayout">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
            <xs:element ref="List" />
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attribute name="cellSize" type="xs:string" />
          <xs:attribute name="spacing" type="xs:float" />
          <xs:attribute name="padding" type="xs:string" />
          <xs:attribute name="startCorner">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="UpperLeft "/>
                    <xs:enumeration value="UpperRight "/>
                    <xs:enumeration value="LowerLeft "/>
                    <xs:enumeration value="LowerRight "/>
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="startAxis">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Horizontal" />
                    <xs:enumeration value="Vertical" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="childAlignment" type="alignment"/>
          <xs:attribute name="constraint">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Flexible" />
                    <xs:enumeration value="FixedColumnCount" />
                    <xs:enumeration value="FixedRowCount" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>            
          </xs:attribute>
          <xs:attribute name="constraintCount" type="xs:integer" />                        
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Panel">
    <xs:complexType>
      <xs:complexContent mixed="true">        
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attribute name="padding" type="rectOffset">
            <xs:annotation>
              <xs:documentation>Sets the padding of this Panel. Please note that if padding is enabled, then this Panel will act as a HorizontalLayoutGroup and will (by default) force expand the width and height of its children (as well as controlling its position, which by default a Panel will not do).</xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>        
      </xs:complexContent>            
    </xs:complexType>
  </xs:element>

  <xs:element name="Mask">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attribute name="showMaskGraphic" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType> 
  </xs:element>

  <xs:element name="VerticalScrollView">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attribute name="horizontal" type="xs:boolean" />
          <xs:attribute name="vertical" type="xs:boolean" />
          <xs:attribute name="movementType" type="scrollbarMovementType" />
          <xs:attribute name="elasticity" type="xs:float" />
          <xs:attribute name="inertia" type="xs:boolean" />
          <xs:attribute name="decelerationRate" type="xs:float" />
          <xs:attribute name="scrollSensitivity" type="xs:float" />          
          <xs:attribute name="horizontalScrollbarVisibility" type="scrollbarVisibilitySetting" />
          <xs:attribute name="horizontalScrollbarSpacing" type="xs:float" />
          <xs:attribute name="verticalScrollbarVisibility" type="scrollbarVisibilitySetting" />
          <xs:attribute name="verticalScrollbarWidth" type="xs:float" />
          <xs:attribute name="onValueChanged" type="functionScrollView" />
          <xs:attribute name="noScrollbars" type="xs:boolean" />
          <xs:attribute name="scrollbarBackgroundColor" type="color" />
          <xs:attribute name="scrollbarBackgroundImage" type="xs:string" />
          <xs:attribute name="scrollbarColors" type="colorblock" />
          <xs:attribute name="scrollbarImage" type="xs:string"/> 
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
  
  <xs:element name="HorizontalScrollView">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attribute name="horizontal" type="xs:boolean" />
          <xs:attribute name="vertical" type="xs:boolean" />
          <xs:attribute name="movementType" type="scrollbarMovementType" />
          <xs:attribute name="elasticity" type="xs:float" />
          <xs:attribute name="inertia" type="xs:boolean" />
          <xs:attribute name="decelerationRate" type="xs:float" />
          <xs:attribute name="scrollSensitivity" type="xs:float" />
          <xs:attribute name="horizontalScrollbarVisibility" type="scrollbarVisibilitySetting" />
          <xs:attribute name="horizontalScrollbarSpacing" type="xs:float" />
          <xs:attribute name="horizontalScrollbarHeight" type="xs:float" />
          <xs:attribute name="verticalScrollbarVisibility" type="scrollbarVisibilitySetting" />
          <xs:attribute name="verticalScrollbarSpacing" type="xs:float" />
          <xs:attribute name="onValueChanged" type="functionScrollView" />
          <xs:attribute name="noScrollbars" type="xs:boolean" />
          <xs:attribute name="scrollbarBackgroundColor" type="color" />
          <xs:attribute name="scrollbarColors" type="colorblock" />
          <xs:attribute name="scrollbarImage" type="xs:string"/>
        </xs:extension>        
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="br">
    <xs:complexType />
  </xs:element>
  
  <xs:element name="b">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="textGroup" />
          </xs:choice>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="i">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="textGroup" />
          </xs:choice>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="textcolor">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="textGroup" />
          </xs:choice>
          <xs:attribute name="color" type="unitytextcolor" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="textsize">
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="textGroup" />
          </xs:choice>
          <xs:attribute name="size" type="xs:float" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:group name="textGroup">
    <xs:choice>
      <xs:element ref="b" />
      <xs:element ref="i" />      
      <xs:element ref="textcolor" />
      <xs:element ref="textsize" />
      <xs:element ref="br" />
    </xs:choice>
  </xs:group>

  <xs:element name="Text">
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="textGroup" />            
          </xs:choice>          
          <xs:attribute name="alignment" type="alignment" />
          <xs:attribute name="color" type="color" />
          <xs:attributeGroup ref="rectTransform" />
          <xs:attributeGroup ref="rectPosition" />
          <xs:attributeGroup ref="text" />
          <xs:attribute name="raycastTarget" type="xs:boolean" />
        </xs:extension>
      </xs:complexContent>            
    </xs:complexType>
  </xs:element>  
  
  <xs:element name="Image">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="image" />
          <xs:attributeGroup ref="rectTransform" />
          <xs:attributeGroup ref="rectPosition" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>    
  </xs:element>
  
  <xs:element name="Include">
    <xs:complexType>
      <xs:attribute name="path" type="xs:string" />
    </xs:complexType>
  </xs:element>

  <xs:element name="Defaults">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
            <xs:element ref="Tooltip" />
            <xs:element ref="Cell" />
            <xs:element ref="Row" />
          </xs:choice>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Tooltip">    
    <xs:complexType>
      <xs:attributeGroup ref="tooltip" />
    </xs:complexType>
  </xs:element>

  <xs:element name="Button">    
    <xs:complexType mixed="true">
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="1">            
            <xs:element ref="Text" />
          </xs:choice>
          <xs:attribute name="interactable" type="xs:boolean" />
          <xs:attributeGroup ref="button" />
          <xs:attributeGroup ref="events" />
          <xs:attributeGroup ref="rectTransform" />
          <xs:attributeGroup ref="rectPosition" />
          <xs:attributeGroup ref="image" />
          <xs:attributeGroup ref="text" />
          <xs:attributeGroup ref="layoutElement" />
          <xs:attributeGroup ref="animation" />
          <xs:attributeGroup ref="dragging" />
          <xs:attribute name="text" type="xs:string" />
          <xs:attribute name="textShadow" type="color" />
          <xs:attribute name="textOutline" type="color" />
          <xs:attribute name="textAlignment" type="alignment" />
          <xs:attribute name="icon" type="xs:string" />
          <xs:attribute name="iconWidth" type="xs:float" />
          <xs:attribute name="iconColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies the icon color. If you wish the icon to be transparent, please use "rgba(1,1,1,0)" instead of "clear".</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="iconHoverColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies the icon color when the mouse is over this element.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="iconDisabledColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies the icon color when the element is disabled (interactable = false).</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="iconAlignment">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Left" />
                    <xs:enumeration value="Right" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="padding" type="rectOffset" />
          <xs:attribute name="textColors" type="colorblock" />
        </xs:extension>      
      </xs:complexContent>
    </xs:complexType>    
  </xs:element>

  <xs:element name="Dropdown">
    <xs:complexType>
      <xs:complexContent mixed="true">        
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:element ref="Option"></xs:element>
          </xs:choice>
          <xs:attribute name="interactable" type="xs:boolean" />
          <xs:attribute name="onValueChanged" type="functionDropdown" />
          <xs:attributeGroup ref="image" />
          <xs:attribute name="textColor" type="color" />
          <xs:attribute name="textAlignment" type="alignment" />
          <xs:attribute name="textShadow" type="color" />
          <xs:attribute name="textOutline" type="color" />
          <xs:attribute name="itemBackgroundColors" type="colorblock" />
          <xs:attribute name="itemTextColor" type="color" />
          <xs:attribute name="colors" type="colorblock" />
          <xs:attribute name="arrowImage" type="xs:string" />
          <xs:attribute name="arrowColor" type="color" />
          <xs:attributeGroup ref="text" />
          <xs:attribute name="scrollbarColors" type="colorblock" />
          <xs:attribute name="scrollbarImage" type="xs:string" />
          <xs:attribute name="scrollbarBackgroundColor" type="color" />
          <xs:attribute name="scrollbarBackgroundImage" type="xs:string" />
          <xs:attribute name="dropdownBackgroundColor" type="color" />
          <xs:attribute name="dropdownBackgroundImage" type="xs:string" />
          <xs:attribute name="dropdownHeight" type="xs:float" />
          <xs:attribute name="checkColor" type="color" />
          <xs:attribute name="checkImage" type="xs:string" />
          <xs:attribute name="checkSize" type="xs:float" />
          <xs:attribute name="checkImagePreserveAspect" type="xs:boolean" />
          <xs:attribute name="itemHeight" type="xs:float" />
          <xs:attribute name="vm-options" type="xs:string" />
        </xs:extension>        
      </xs:complexContent>
    </xs:complexType>     
  </xs:element>    

  <xs:element name="Option">
    <xs:complexType mixed="true">
      <xs:attribute name="selected" type="xs:boolean" />
    </xs:complexType>
  </xs:element>

  <xs:element name="Slider">
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="base">          
          <xs:attribute name="interactable" type="xs:boolean" />          
          <xs:attribute name="colors" type="colorblock" />
          <xs:attribute name="direction">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="LeftToRight" />
                    <xs:enumeration value="RightToLeft" />
                    <xs:enumeration value="TopToBottom" />
                    <xs:enumeration value="BottomToTop" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="minValue" type="xs:float" />
          <xs:attribute name="maxValue" type="xs:float"/>
          <xs:attribute name="wholeNumbers" type="xs:boolean" />
          <xs:attribute name="value" type="xs:float" />
          <xs:attribute name="onValueChanged" type="functionSlider" />
          <xs:attribute name="backgroundColor" type="color" />
          <xs:attribute name="backgroundImage" type="xs:string" />
          <xs:attribute name="fillColor" type="color" />
          <xs:attribute name="fillImage" type="xs:string" />
          <xs:attribute name="handleColor" type="color" />
          <xs:attribute name="handleImage" type="xs:string" />
          <xs:attribute name="fillMaskImage" type="xs:string" />
          <xs:attribute name="fillPadding" type="rectOffset" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="Toggle">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="1">
            <xs:element ref="Text" />
          </xs:choice>
          <xs:attribute name="interactable" type="xs:boolean" />
          <xs:attribute name="colors" type="colorblock" />
          <xs:attribute name="onValueChanged" type="functionToggle" />
          <xs:attribute name="isOn" type="xs:boolean" />          
          <xs:attributeGroup ref="text" />
          <xs:attribute name="textcolor" type="color" />
          <xs:attribute name="textShadow" type="color" />
          <xs:attribute name="textOutline" type="color" />
          <xs:attribute name="textAlignment" type="alignment" />
          <xs:attribute name="toggleWidth" type="xs:float">
            <xs:annotation>
              <xs:documentation>Sets the width of the toggles background image and checkmark image.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleHeight" type="xs:float">
            <xs:annotation>
              <xs:documentation>Sets the height of the toggles background image and checkmark image.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleBackgroundImage" type="xs:string" />
          <xs:attribute name="toggleCheckmarkImage" type="xs:string" />
          <xs:attribute name="checkColor" type="color" />
          <xs:attribute name="toggleCheckmarkSize" type="xs:float" />
          <xs:attribute name="toggleCheckmarkImagePreserveAspect" type="xs:float" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ToggleButton">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">          
          <xs:attribute name="interactable" type="xs:boolean" />          
          <xs:attribute name="onValueChanged" type="functionToggle" />
          <xs:attribute name="isOn" type="xs:boolean" />
          <xs:attribute name="textcolor" type="color" />
          <xs:attributeGroup ref="button" />
          <xs:attributeGroup ref="events" />
          <xs:attributeGroup ref="rectTransform" />
          <xs:attributeGroup ref="rectPosition" />
          <xs:attributeGroup ref="image" />
          <xs:attributeGroup ref="text" />
          <xs:attributeGroup ref="layoutElement" />
          <xs:attributeGroup ref="animation" />
          <xs:attribute name="textShadow" type="color" />
          <xs:attribute name="textOutline" type="color" />
          <xs:attribute name="textAlignment" type="alignment" />
          <xs:attribute name="icon" type="xs:string" />
          <xs:attribute name="iconWidth" type="xs:float" />
          <xs:attribute name="iconColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies the icon color. If you wish the icon to be transparent, please use "rgba(1,1,1,0)" instead of "clear".</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="iconHoverColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies the icon color when the mouse is over this element.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="iconAlignment">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="Left" />
                <xs:enumeration value="Right" />
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="padding" type="rectOffset" />
          <xs:attribute name="deselectedBackgroundColor" type="color" />
<!--          <xs:attribute name="deselectedTextColor" type="color">            -->
          <xs:attribute name="deselectedIconColor" type="color" />
          <xs:attribute name="selectedBackgroundColor" type="color" />
<!--          <xs:attribute name="selectedTextColor" type="color" />          -->
          <xs:attribute name="selectedIconColor" type="color" />
          <xs:attribute name="textColors" type="colorblock" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="ToggleGroup">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="base">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default"></xs:group>
          </xs:choice>
          <xs:attributeGroup ref="layoutBase" />
          <xs:attributeGroup ref="image" />
          <xs:attribute name="allowSwitchOff" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>If this is set to true, then the user may clear their selection from within this group by clicking on the selected Toggle.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleBackgroundImage" type="xs:string">
            <xs:annotation>
              <xs:documentation>Specifies an image to use as the background for each of the Toggle elements in this group.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleBackgroundColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies a color to use for the background image of each of the Toggle elements in this group.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleSelectedImage" type="xs:string">
            <xs:annotation>
              <xs:documentation>Specifies an image to show when a Toggle in this group has been selected (also referred to in Unity as a CheckMark)</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="toggleSelectedColor" type="color">
            <xs:annotation>
              <xs:documentation>Specifies a color to use for the selected image/checkmarks of Toggle elements in this group.</xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onValueChanged" type="function"></xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="InputField">
    <xs:complexType>
      <xs:complexContent mixed="true">        
        <xs:extension base="base">          
          <xs:attribute name="interactable" type="xs:boolean" />
          <xs:attribute name="colors" type="colorblock" />
          <xs:attribute name="contentType">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Standard" />
                    <xs:enumeration value="AutoCorrected" />
                    <xs:enumeration value="IntegerNumber" />
                    <xs:enumeration value="DecimalNumber" />
                    <xs:enumeration value="AlphaNumeric" />
                    <xs:enumeration value="Name" />
                    <xs:enumeration value="EmailAddress" />
                    <xs:enumeration value="Password" />
                    <xs:enumeration value="Pin" />
                    <xs:enumeration value="Custom" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="lineType">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="SingleLine" />
                    <xs:enumeration value="MultiLineSubmit" />
                    <xs:enumeration value="MultiLineNewline" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="inputType">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Standard" />
                    <xs:enumeration value="AutoCorrect" />
                    <xs:enumeration value="Password" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="keyboardType">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="Default" />
                    <xs:enumeration value="ASCIICapable" />
                    <xs:enumeration value="NumbersAndPunctuation" />
                    <xs:enumeration value="URL" />
                    <xs:enumeration value="NumberPad" />
                    <xs:enumeration value="PhonePad" />
                    <xs:enumeration value="NamePhonePad" />
                    <xs:enumeration value="EmailAddress" />
                    <xs:enumeration value="NintendoNetworkAccount" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="characterValidation">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="None" />
                    <xs:enumeration value="Integer" />
                    <xs:enumeration value="Decimal" />
                    <xs:enumeration value="Alphanumeric" />
                    <xs:enumeration value="Name" />
                    <xs:enumeration value="EmailAddress" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="caretBlinkRate" type="xs:float" />
          <xs:attribute name="caretWidth" type="xs:integer" />          
          <xs:attribute name="caretColor" type="color" />
          <xs:attribute name="selectionColor" type="color" />
          <xs:attribute name="hideMobileInput" type="xs:boolean" />
          <xs:attribute name="readOnly" type="xs:boolean" />
          <xs:attribute name="onValueChanged" type="functionInputField" />
          <xs:attribute name="onEndEdit" type="functionInputField" />
          <xs:attribute name="textColor" type="color" />          
          <xs:attributeGroup ref="text" />
          <xs:attribute name="characterLimit" type="xs:int" />
          <xs:attribute name="textAlignment" type="alignment" />
          <xs:attribute name="placeholderText" type="xs:string" />
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>              

  <xs:attributeGroup name="button">    
    <xs:attribute name="textColor" type="color" />
    <xs:attribute name="colors" type="colorblock" />
    <xs:attributeGroup ref="simpleAttributes" />
    <xs:attributeGroup ref="audio" />
  </xs:attributeGroup>
  
  <xs:attributeGroup name="events">    
    <xs:attribute name="onClick" type="function" />
    <xs:attribute name="onMouseEnter" type="function" />
    <xs:attribute name="onMouseExit" type="function" />
    <xs:attribute name="onSubmit" type="function" />
    <xs:attribute name="onShow" type="function" />
    <xs:attribute name="onHide" type="function" />
  </xs:attributeGroup>

  <xs:attributeGroup name="layoutBase">
    <xs:attribute name="padding" type="xs:string" />
    <xs:attribute name="spacing" type="xs:string" />
    <xs:attribute name="childForceExpandHeight" type="xs:boolean" />
    <xs:attribute name="childForceExpandWidth" type="xs:boolean" />
    <xs:attribute name="childAlignment" type="alignment" />
  </xs:attributeGroup>

  <xs:attributeGroup name="audio">
    <xs:attribute name="onClickSound" type="xs:string" />
    <xs:attribute name="onMouseEnterSound" type="xs:string" />
    <xs:attribute name="onMouseExitSound" type="xs:string" />
    <xs:attribute name="audioVolume" type="xs:float" />
    <xs:attribute name="onShowSound" type="xs:string" />
    <xs:attribute name="onHideSound" type="xs:string" />
    <xs:attribute name="audioMixerGroup" type="xs:string" />
  </xs:attributeGroup>

  <xs:attributeGroup name="rectPosition">
    <xs:annotation>
      <xs:documentation>Rect position code (width, height, alignment)</xs:documentation>
    </xs:annotation>
    <xs:attribute name="width" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the width of the element. Acceptable values are floats (e.g. 100), or percentage of its parent (e.g. 100%)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="height" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the height of the element. Acceptable values are floats (e.g. 100), or percentage of its parent (e.g. 100%)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rectAlignment" type="alignment">
      <xs:annotation>
        <xs:documentation>Where to position the element within its parents bounds (only used if width and height are set to percentage values).</xs:documentation>
      </xs:annotation>            
    </xs:attribute>
    <xs:attribute name="offsetXY" type="vector2">
      <xs:annotation>
        <xs:documentation>An offset (X,Y) to apply to this elements position. E.g. a value of '-32,0' would make this element appear 32 units to the left of where it normally would.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="dragging">
    <xs:attribute name="allowDragging" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>If set to true, then this element may be dragged by the user. Please note that this may not work for elements which have their position controlled by a layout group.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="restrictDraggingToParentBounds" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>If set to true, and allowDragging is also true, then this element may only be dragged within the bounds of its parent element.</xs:documentation>
      </xs:annotation>      
    </xs:attribute>
    <xs:attribute name="returnToOriginalPositionWhenReleased" type="xs:boolean" default="true">
      <xs:annotation>
        <xs:documentation>If set to true, then this element will return to its original position when released.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="isDropReceiver" type="xs:boolean" default="false">
      <xs:annotation>
        <xs:documentation>Can this element receive OnDrop events?</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onBeginDrag" type="function">
      <xs:annotation>
        <xs:documentation>Method definition to receive OnBeginDrag events</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onEndDrag" type="function">
      <xs:annotation>
        <xs:documentation>Method definition to receive OnEndDrag events</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="onDrag" type="function">
      <xs:annotation>
        <xs:documentation>Method definition to receive OnDrag events</xs:documentation>
      </xs:annotation>
    </xs:attribute>    
    
  </xs:attributeGroup>

  <xs:simpleType name="scrollbarVisibilitySetting">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Permanent" />
          <xs:enumeration value="AutoHide" />
          <xs:enumeration value="AutoHideAndExpandViewport" />
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <xs:simpleType name="alignment">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="UpperLeft" />
          <xs:enumeration value="UpperCenter" />
          <xs:enumeration value="UpperRight" />
          <xs:enumeration value="MiddleLeft" />
          <xs:enumeration value="MiddleCenter" />
          <xs:enumeration value="MiddleRight" />
          <xs:enumeration value="LowerLeft" />
          <xs:enumeration value="LowerCenter" />
          <xs:enumeration value="LowerRight" />
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <xs:simpleType name="scrollbarMovementType">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Unrestricted" />
          <xs:enumeration value="Elastic" />
          <xs:enumeration value="Clamped" />
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <xs:attributeGroup name="simpleAttributes">
    <xs:attribute name="id" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies an id for this object which can be used to access it later on, via XmlLayout.GetElementById(). This value should be unique within each XmlLayout.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="class" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Specifies a 'class' for this element. The 'class' is defined within a 'Defaults' tag and specifies default values to be used by elements of this type and class. Multiple classes may be specified for a single element (separated by spaces), and will be applied in a cascading manner.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hoverClass" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          Specifies a class for this element which will be applied when the mouse is over it, and removed once the mouse leaves. As with 'class', multiple classes may be specified, separated by spaces.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the name of this object in the hierarchy.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="active" type="xs:boolean" />
    <xs:attribute name="internalId" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specified an internal id for this object which can be used to access it later on, via XmlElement.GetElementByInternalId(). This can be used to access child elements of any XmlElement.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="shadow" type="color"></xs:attribute>
    <xs:attribute name="shadowDistance" type="vector2" />
    <xs:attribute name="outline" type="color"></xs:attribute>
    <xs:attribute name="outlineSize" type="vector2" />
    <xs:attribute name="prefabPath" type="xs:string">
      <xs:annotation>
        <xs:documentation>This attribute allows you to use a non-standard prefab for any element. This attribute expects a path to the desired prefab which must be located within a resources folder. please be advised that this can lead to unexpected behaviour and/or errors if the prefab does not contain components which its tag handler expects (e.g. the Button tag handler will expect a Button component to be present in the prefab)</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="opacity" type="xs:float">
      <xs:annotation>
        <xs:documentation>Sets the default opacity for this element using a CanvasGroup component.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attributeGroup ref="tooltip" />
    <xs:attribute name="contentSizeFitter">
      <xs:simpleType>
        <xs:union memberTypes="mvvmPattern">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="vertical" />
              <xs:enumeration value="horizontal" />
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
  </xs:attributeGroup>
  
  <xs:attributeGroup name="tooltip">
    <xs:attribute name="tooltip" type="xs:string">
      <xs:annotation>
        <xs:documentation>Specifies the tooltip text for this element. Rich text is supported.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tooltipFollowMouse" type="xs:boolean" />
    <xs:attribute name="tooltipPosition">
      <xs:simpleType>
        <xs:union memberTypes="mvvmPattern">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="Above" />
              <xs:enumeration value="Below" />
              <xs:enumeration value="Left" />
              <xs:enumeration value="Right" />
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="tooltipOffset" type="xs:float">
      <xs:annotation>
        <xs:documentation>Specifies how far from the element the tooltip should be positioned.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="tooltipBackgroundColor" type="color" />
    <xs:attribute name="tooltipBackgroundImage" type="xs:string" />
    <xs:attribute name="tooltipBorderColor" type="color" />
    <xs:attribute name="tooltipBorderImage" type="xs:string" />
    <xs:attribute name="tooltipTextColor" type="color" />
    <xs:attribute name="tooltipFontSize" type="xs:integer" />
    <xs:attribute name="tooltipFont" type="xs:string" />
    <xs:attribute name="tooltipPadding" type="rectOffset" />
    <xs:attribute name="tooltipTextOutlineColor" type="color" />
  </xs:attributeGroup>
    
  <xs:attributeGroup name="rectTransform">
    <xs:attribute name="anchorMin" type="xs:string" />
    <xs:attribute name="anchorMax" type="xs:string" />
    <xs:attribute name="sizeDelta" type="xs:string" />
    <xs:attribute name="pivot" type="xs:string" />
    <xs:attribute name="rotation" type="xs:string" />
    <xs:attribute name="scale" type="xs:string" />
    <xs:attribute name="offsetMin" type="xs:string" />
    <xs:attribute name="offsetMax" type="xs:string" />
  </xs:attributeGroup>

  <xs:attributeGroup name="layoutElement">
    <xs:attribute name="ignoreLayout" type="xs:boolean" />
    <xs:attribute name="minWidth" type="xs:int" />
    <xs:attribute name="minHeight" type="xs:int" />
    <xs:attribute name="preferredWidth" type="xs:int" />
    <xs:attribute name="preferredHeight" type="xs:int" />
    <xs:attribute name="flexibleWidth" type="xs:int" />
    <xs:attribute name="flexibleHeight" type="xs:int" />
  </xs:attributeGroup>

  <xs:attributeGroup name="image">
    <xs:attribute name="preserveAspect" type="xs:boolean" />
    <xs:attribute name="color" type="color" />
    <xs:attribute name="image" type="xs:string" />
    <xs:attribute name="sprite" type="xs:string" />
    <xs:attribute name="type">
      <xs:annotation>
        <xs:documentation>Image Type (Simple, Sliced, Tiled, Filled)</xs:documentation>
      </xs:annotation>
      <xs:simpleType>
        <xs:union memberTypes="mvvmPattern">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="Simple" />
              <xs:enumeration value="Sliced" />
              <xs:enumeration value="Tiled" />
              <xs:enumeration value="Filled" />
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="raycastTarget" type="xs:boolean" />
    <xs:attribute name="fillMethod">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Horizontal" />
          <xs:enumeration value="Vertical" />
          <xs:enumeration value="Radial90" />
          <xs:enumeration value="Radial180" />
          <xs:enumeration value="Radial360" />
        </xs:restriction>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="fillOrigin" type="xs:int" />
    <xs:attribute name="fillAmount" type="xs:float" />
    <xs:attribute name="fillClockwise" type="boolean" />
  </xs:attributeGroup>

  <xs:attributeGroup name="text">
    <xs:attribute name="fontStyle" type="fontStyle" />
    <xs:attribute name="fontSize" type="xs:string" />
    <xs:attribute name="font" type="xs:string" />
    <xs:attribute name="horizontalOverflow" type="horizontalOverflow" />
    <xs:attribute name="verticalOverflow" type="verticalOverflow" />
    <xs:attribute name="resizeTextForBestFit" type="xs:boolean" />
    <xs:attribute name="resizeTextMinSize" type="xs:int" />
    <xs:attribute name="resizeTextMaxSize" type="xs:int" />
    <xs:attribute name="alignByGeometry" type="xs:boolean" />
  </xs:attributeGroup>

  <xs:attributeGroup name="animation">
    <xs:attribute name="showAnimation">
      <xs:simpleType>
        <xs:union memberTypes="mvvmPattern">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="None" />
              <xs:enumeration value="Grow" />
              <xs:enumeration value="Grow_Vertical" />
              <xs:enumeration value="Grow_Horizontal" />
              <xs:enumeration value="FadeIn" />
              <xs:enumeration value="SlideIn_Left" />
              <xs:enumeration value="SlideIn_Right" />
              <xs:enumeration value="SlideIn_Top" />
              <xs:enumeration value="SlideIn_Bottom" />
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="hideAnimation">      
      <xs:simpleType>
        <xs:union memberTypes="mvvmPattern">
          <xs:simpleType>
            <xs:restriction base="xs:token">
              <xs:enumeration value="None" />
              <xs:enumeration value="Shrink" />
              <xs:enumeration value="Shrink_Vertical" />
              <xs:enumeration value="Shrink_Horizontal" />
              <xs:enumeration value="FadeOut" />
              <xs:enumeration value="SlideOut_Left" />
              <xs:enumeration value="SlideOut_Right" />
              <xs:enumeration value="SlideOut_Top" />
              <xs:enumeration value="SlideOut_Bottom" />
            </xs:restriction>
          </xs:simpleType>
        </xs:union>
      </xs:simpleType>
    </xs:attribute>
    <xs:attribute name="animationDuration">
      <xs:simpleType>
        <xs:restriction base="xs:float">
<!--          <xs:minInclusive value="0" />           -->
        </xs:restriction>
      </xs:simpleType>      
    </xs:attribute>
    <xs:attribute name="showAnimationDelay" type="xs:float">
      <xs:annotation>
        <xs:documentation>Add a short delay before playing the show animation. Useful for playing animations in sequence.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="hideAnimationDelay" type="xs:float">
      <xs:annotation>
        <xs:documentation>Add a short delay before playing the hide animation. Useful for playing animations in sequence.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="animationController" type="xs:string">
      <xs:annotation>
        <xs:documentation>Allows you to specify a custom runtime animation controller for this element - please note that doing so will prevent certain default animations from functioning, e.g. Shrink/Grow/etc.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="animationSpeed" type="xs:float">
      <xs:annotation>
        <xs:documentation>Allows you to specify a custom animation speed for this element's Animator component.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:simpleType name="horizontalOverflow">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Wrap" />
          <xs:enumeration value="Overflow" />
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <xs:simpleType name="verticalOverflow">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Truncate" />
          <xs:enumeration value="Overflow" />
        </xs:restriction>
      </xs:simpleType>
    </xs:union>
  </xs:simpleType>

  <xs:simpleType name="colorblock">
    <xs:annotation>
      <xs:documentation>Normal Color|Highlighted Color|Pressed Color|Disabled Color  e.g. "white|gray|white|rgba(1,1,1,0.5)"</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">      
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="color">
    <xs:annotation>
      <xs:documentation>Color in either HTML format (#RRGGBB | #RRGGBBAA), rgb/rgba format (rgb(1,1,1) | rgba(1,1,1,1)), or a named color (as per UnityEngine.Color)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">      
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="unitytextcolor">
    <xs:annotation>
      <xs:documentation>Color in either HTML format (#RRGGBB | #RRGGBBAA), or a named color (as per UnityEngine.Color)</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="function">
    <xs:annotation>
      <xs:documentation>        
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), or a literal string value (no quotes required). 'argument' is optional.        
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">      
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="functionDropdown">
    <xs:annotation>
      <xs:documentation>        
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), 'selectedIndex' (pass the newly selected index), 'selectedText' (pass the newly selected text value),  or a literal string value which XmlLayout will attempt to convert into the type required by the function (no quotes required). 'argument' is optional.        
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="functionSlider">
    <xs:annotation>
      <xs:documentation>
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), 'selectedValue' (pass the newly selected float value),  or a literal string value which XmlLayout will attempt to convert into the type required by the function. 'argument' is optional.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="functionToggle">
    <xs:annotation>
      <xs:documentation>
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), 'selectedValue' (pass the newly selected boolean value),  or a literal string value which XmlLayout will attempt to convert into the type required by the function. 'argument' is optional.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="functionScrollView">
    <xs:annotation>
      <xs:documentation>
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), 'selectedValue' [or 'xy'] (pass the newly selected Vector2 value), 'x' (pass the new 'horizontalNormalisedPosition' value), 'y' (pass the new 'verticalNormalisedPosition' value), or a literal string value which XmlLayout will attempt to convert into the type required by the function. 'argument' is optional.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="functionInputField">
    <xs:annotation>
      <xs:documentation>
        A function to call on the XmlEventReceiver attached to this XmlLayout.
        Syntax: "FunctionName(argument);" where argument is either 'this' (pass this object), 'value' (pass the new string value), or a literal string value which XmlLayout will attempt to convert into the type required by the function. 'argument' is optional.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
    </xs:restriction>
  </xs:simpleType>

  <xs:simpleType name="vector2">
    <xs:list itemType="xs:float" />
  </xs:simpleType>

  <xs:simpleType name="vector3">
    <xs:list itemType="xs:float" />
  </xs:simpleType>

  <xs:simpleType name="vector4">
    <xs:list itemType="xs:float" />
  </xs:simpleType>

  <xs:simpleType name="floatList">
    <xs:list itemType="xs:float" />
  </xs:simpleType>

  <xs:simpleType name="fontStyle">
    <xs:union memberTypes="mvvmPattern">
      <xs:simpleType>
        <xs:restriction base="xs:token">
          <xs:enumeration value="Normal" />
          <xs:enumeration value="Bold" />
          <xs:enumeration value="Italic" />
          <xs:enumeration value="BoldAndItalic" />      
        </xs:restriction>
      </xs:simpleType>
    </xs:union>    
  </xs:simpleType>  

  <xs:simpleType name="rectOffset">
    <xs:annotation>
      <xs:documentation>left right top bottom</xs:documentation>
    </xs:annotation>
    <xs:list itemType="xs:int" />
  </xs:simpleType>

  <xs:simpleType name="rect">
    <xs:annotation>
      <xs:documentation>x y width height</xs:documentation>
    </xs:annotation>
    <xs:list itemType="xs:float" />
  </xs:simpleType>

  <xs:element name="List">
    <xs:complexType>
      <xs:complexContent mixed="true">
        <xs:extension base="blank">
          <xs:choice minOccurs="0" maxOccurs="unbounded">
            <xs:group ref="default" />
            <xs:element ref="Row" />
            <xs:element ref="Cell" />
          </xs:choice>
          <xs:attribute name="vm-dataSource" type="xs:string" />
          <xs:attribute name="itemAnimationDuration" type="xs:float" />
          <xs:attribute name="itemShowAnimation">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="None" />
                    <xs:enumeration value="Grow" />
                    <xs:enumeration value="Grow_Vertical" />
                    <xs:enumeration value="Grow_Horizontal" />
                    <xs:enumeration value="FadeIn" />
                    <xs:enumeration value="SlideIn_Left" />
                    <xs:enumeration value="SlideIn_Right" />
                    <xs:enumeration value="SlideIn_Top" />
                    <xs:enumeration value="SlideIn_Bottom" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="itemHideAnimation">
            <xs:simpleType>
              <xs:union memberTypes="mvvmPattern">
                <xs:simpleType>
                  <xs:restriction base="xs:token">
                    <xs:enumeration value="None" />
                    <xs:enumeration value="Shrink" />
                    <xs:enumeration value="Shrink_Vertical" />
                    <xs:enumeration value="Shrink_Horizontal" />
                    <xs:enumeration value="FadeOut" />
                    <xs:enumeration value="SlideOut_Left" />
                    <xs:enumeration value="SlideOut_Right" />
                    <xs:enumeration value="SlideOut_Top" />
                    <xs:enumeration value="SlideOut_Bottom" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:union>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <!-- New Custom Data Types for MVVM -->
  
  <xs:simpleType name="boolean">
    <xs:union memberTypes="xs:boolean mvvmPattern" />
  </xs:simpleType>

  <xs:simpleType name="float">
    <xs:union memberTypes="xs:float mvvmPattern" />
  </xs:simpleType>

  <xs:simpleType name="integer">
    <xs:union memberTypes="xs:integer mvvmPattern" />
  </xs:simpleType>

  <xs:simpleType name="int">
    <xs:union memberTypes="xs:int mvvmPattern" />    
  </xs:simpleType>  

  <xs:simpleType name="mvvmPattern">
    <xs:restriction base="xs:string">
      <xs:pattern value="\{.*\}" />
    </xs:restriction>
  </xs:simpleType>
  
  <!-- /New Custom Data Types for MVVM -->

</xs:schema>